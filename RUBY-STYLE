= Pistos' Ruby Style Guide

(forked from Christian Neukirchen's Ruby Style Guide)

Chris' original message:

"You may not like all rules presented here, but they work very well for
me and have helped producing high quality code.  Everyone is free to
code however they want, write and follow their own style guides, but
when you contribute to my code, please follow these rules:"


== Formatting

* Use ASCII (or UTF-8, if you have to).

* Use 2 space indent, no tabs.

* Use Unix-style line endings.

* Put spaces around operators, and after commas, colons and semicolons
  (unless at EOL, and besides symbols).

* Put a space after opening parentheses, brackets and braces; and before closing
  parentheses, brackets and braces.  e.g.:

  iterator( hash[ :symbol ] ) { |o| o.foo }

* Use two spaces before statement modifiers (postfix
  if/unless/while/until/rescue).

* Use an empty line between defs.

* Use RDoc and its conventions for API documentation.  Don't put an
  empty line between the comment block and the def.

* Use newlines liberally, even within a single Ruby expression, if it will
  improve readability (by clarifying expression components).  e.g. break up
  long conditional expressions and lists (method arguments, Enumerable
  literals, etc.)

* Use empty lines to break up a long method into logical paragraphs.  The
  return value of a long method should be considered a paragraph on its own.

* Keep lines fewer than 80 characters.

* Avoid trailing whitespace.

* Indent "when" as deep as "case".

* Always use a comma after the last element of list literals.  e.g.

  [
    'foo',
    'bar',
  ]
  {
    'bin' => 'baz',
    'blue' => 'green',
  }


== Syntax

* Use parentheses with def when there are arguments.

* Avoid "for".

* Never use "then".

* Use when x; ... for one-line cases.

* Use && and || for boolean expressions; "and" and "or" for control flow.
  (Rule of thumb: If you have to use outer parentheses, you are using the
  wrong operators.)

* Avoid multiline ternary "? :"; use if-else instead.

* Suppress superfluous parentheses when calling methods, but keep them
  when calling "functions" (using the return value in the same line)

    x = Math.sin( y )
    array.delete e

* Use {} when using the return value of a block; use do-end otherwise.

* Multiline {} blocks are fine.

* Avoid "return" where not required.

* Avoid line continuation (\) where not required.

* Never use assignment in a condition:

    # Avoid:
    if v = array.grep(/foo/) ...

* Use ||= freely.

* Only use "common" sigil variables.


== Naming

* Use snake_case for methods and variables; avoid concatenating words
  (e.g. badlychosenidentifier)

* Use CamelCase for classes and modules.  (Keep acronyms like HTTP,
  RFC, XML uppercase.)

* Use SCREAMING_SNAKE_CASE for other constants.

* When choosing identifiers, reader understanding trumps laziness and
  inability to type fast.  Exception for small-scope variables...

* Use one-letter variables for short block/method parameters, according to
  this scheme:

    e: rescued exception or error
    f: files and file names
    i, j: indexes
    k: the key part of a hash entry
    m: methods
    o: any object
    s: strings
    v: any value
    v: the value part of a hash entry

* When defining binary operators, name the argument "other".

* Prefer map over collect, find over detect, find_all over select.


== Comments

* Comments longer than a word are capitalized and use punctuation.

* Avoid comments; aim for self-explanatory code.


== The rest

* Avoid long methods.

* Avoid having too many parameters.

* Use def self.method to define singleton methods.

* Add "global" methods to Kernel (if you have to) and make them private.

* Avoid alias when alias_method will do.

* Write for 1.8, but avoid doing things you know that will break in 1.9.

* Avoid needless metaprogramming.


== General

* Do not mess around in core classes when writing libraries.

* Keep the code simple.

* Be consistent.

* Use common sense.
